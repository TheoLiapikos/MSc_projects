Assignment 1: Text Classification

The goal of this assignment is to gain a deeper understanding of the inner workings of text classification algorithms as well as gain experience in applying them in practical problems.
Part 1

Implement the following variants of the naive Bayes algorithm in Python: a) multinomial naive bayes, b) binary multinomial naive Bayes, c) multivariate Bernoulli naive Bayes (see also additional readings).
Part 2

In this part we will work with the sentence classification corpus from the UCI Machine Learning repository. This corpus contains sentences from the abstract and introduction of 30 scientific articles that come from three different domains:

    1. PLoS Computational Biology (PLOS)
    2. The machine learning repository on arXiv (ARXIV)
    3. The psychology journal Judgment and Decision Making (JDM)

Each article has been annotated (i.e. labeled or tagged) by 3 independent annotators according to the following classes:

    AIMX. The specific research goal of the paper
    OWNX. The authorâ€™s own work, e.g. methods, results, conclusions
    CONT. Contrast, comparison or critique of past work
    BASE. Past work that provides the basis for the work in the article.
    MISC. Any other sentences

You could aggregate the 3 independent annotations, by e.g. assuming an annotation is ground truth if at least two annotators agree and throwing away the rest of the sentences.  

The goal of this part is to experiment with scikit-learn on this data, in order to find which algorithm works best and what type of text pre-processing and representation works best. You should experiment with the naive Bayes family of algorithms and with logistic regression.  You should report the accuracy achieved by the different algorithms, with different parameterizations as well as with different ways to pre-process (stemming, lemmatization, stop-word removal) and represent (unigrams, bigrams, tf/idf) the text.
Logistics

Assignments are for teams of 2-3 students. For part 1 you should deliver Python 3 code documented with docstring. For part 2 you should deliver a Google Colaboratory Python 3 notebook using text cells to appropriately document your experiments and results. You should collaboratively work on GitHub, so that the contribution (commits) of each team member can be measured. Team formation, initial repository acquisition and submission is handled via GitHub classroom. Deadline: 21/12/2018, 23:00. Delayed submissions get a 10% penalty per day, up to 2 days. 
